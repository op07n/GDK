#/bin/usr/env bash

GeneratePlatformsBadge()
{
    local output="![](https://img.shields.io/badge/platforms-"

    for platform in $*; do 
        output+="%20${platform}%20"

        if [ "${platform}" != "${@: -1}" ]; then
            output+="|"
        fi
    done

    echo "${output}-lightgrey.svg)"
}

PROJECT_NAME="$(git config --get remote.origin.url | sed -e "s/^https:\/\///" -e "s@.*/@@" -e "s/\..*//")"
PLATFORMS_BADGE=$(GeneratePlatformsBadge MacOS Ubuntu Win64)


TRAVIS_CI_BADGE="![](https://travis-ci.org/jfcameron/GDK.svg?branch=master)"
APPVEYOR_BADGE="![](https://ci.appveyor.com/api/projects/status/github/jfcameron/GDK)"

RELATIVE_PATH_OF_THIS_SCRIPT=$(echo ${PROJECT_NAME}$(echo $(pwd)/${0#"./"} | sed -e "s@.*${PROJECT_NAME}@@"))

echo ${RELATIVE_PATH_OF_THIS_SCRIPT}

########################################

Readme=$(cat << README
<!--- WARN --->
<!--- This File is Automatically generated by ${RELATIVE_PATH_OF_THIS_SCRIPT}. Do not edit directly! --->
<!--- WARN --->
# ${PROJECT_NAME}
![alt tag](http://jfcameron.github.io/Github/GDK/EarlyRender.png "")

## CI Information:
${PLATFORMS_BADGE} ![](https://coveralls.io/repos/github/jfcameron/GDK/badge.svg?branch=master)

| VM OS | Compiler | Status | Logs | Builds |
| --- | --- | --- | --- | --- |
| Ubuntu | g++ | ${TRAVIS_CI_BADGE} | https://travis-ci.org/jfcameron/GDK | [Linux](https://jfcameron.github.io/GDK/build/linux.zip) |
| Macos | clang++ | ${TRAVIS_CI_BADGE} | https://travis-ci.org/jfcameron/GDK | [Macos](https://jfcameron.github.io/GDK/build/osx.zip) |
| Win64 | MSVC | ![](https://ci.appveyor.com/api/projects/status/sxivr8m9r1tjggis/branch/master?svg=true) | https://ci.appveyor.com/project/jfcameron/gdk | [Win64](https://jfcameron.github.io/GDK/build/win64.zip) |

Documentation: https://jfcameron.github.io/GDK/
Coverage: https://coveralls.io/github/jfcameron/GDK

## Description:
Library for multiplatform game development in C++ (C++11)

### Math
* 2D and 3D linear algebra
* 2-4d Vectors, Quaternion, Mat4x4, Plane

### Graphics
* 3D Rendering via OpenGL
* Multi window support

### Physics2D
* 2D rb sim via Box2D

### Entity Component System
* Organize systems into an ECS

### Input
* Mouse & KB support

### Time, Files, Debug, 3D, Audio

## Building the development kit:
* Add glfw dependency, build GDK, include lib in your project

## Libraries used:
* [GLFW](http://www.glfw.org/) - OpenGL context management, multiplatform window management, time, input utilities.
* [Box2D](https://github.com/erincatto/Box2D) - 2D rigidbody sim
* [stb_image](https://github.com/nothings/stb) - Image decoder
* [GLM](http://glm.g-truc.net/0.9.8/index.html) - Math lib

## Tools used:
* Doxygen
* Python
* CMake

README
)

echo "$Readme" > ../README.md
