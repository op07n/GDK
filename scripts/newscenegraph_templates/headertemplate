// Â© ${YEAR} Joseph Cameron - All Rights Reserved
// Project: GDK
// Created on ${DATE}.
#ifndef GDK_ECS_${NAMESPACEUPPER}_${CLASSNAMEUPPER}_H
#define GDK_ECS_${NAMESPACEUPPER}_${CLASSNAMEUPPER}_H

//gdk inc
#include "EntityComponentSystem/SceneGraph.h"
//std inc
#include <iosfwd>

namespace GDK
{
    namesapce ECS
    {
        namespace ${NAMESPACE}
        {
            /*!
            No description provided for ${CLASSNAME} scenegraph
            */
            class ${CLASSNAME} final : public SceneGraph
            {
                friend std::ostream& operator<< (std::ostream&, const GDK::ECS::${NAMESPACE}::${CLASSNAME}&);
                
                // Data members

            protected:
                // SceneGraph interface
                virtual void draw(const Math::IntVector2 &aFrameBufferSize) override final;
                virtual void fixedUpdate() override final;
                virtual void update()      override final;
                
                virtual void OnComponentAddedToAGameObject(const std::weak_ptr<ECS::Component>&)     override final;
                virtual void OnComponentRemovedFromAGameObject(const std::weak_ptr<ECS::Component>&) override final;

            public:
                // Accessors
      
                // Public methods

                // Constructors, destructors
                ${CLASSNAME}(Scene *a) : SceneGraph(a){}

            };

            std::ostream& operator<< (std::ostream&, const GDK::ECS::${NAMESPACE}::${CLASSNAME}&);

        }

    }

}

#endif /* GDK_ECS_${NAMESPACEUPPER}_${CLASSNAMEUPPER}_H  */
